# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BL9Zzl8zoWIJXuLnwR4r4yZePXR6294G
"""

!pip install openai langchain-openai python-dotenv requests pillow matplotlib
!pip install langchain langchain-core langchain-community
!pip install openai pypdf tiktoken chromadb

# 필요한 모듈 임포트
import os
from openai import AzureOpenAI
import requests
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt
import base64
from langchain.prompts import PromptTemplate
from langchain_openai import AzureChatOpenAI
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough

import os
os.environ["OPENAI_API_KEY"] = "{YOUR_API_KEY}"
os.environ["AZURE_OPENAI_ENDPOINT"] = "YOUR_API_ENDPOINT"
os.environ["OPENAI_API_TYPE"] = "{YOUR_API_TYPE}"
os.environ["OPENAI_API_VERSION"] = "{YOUR_API_VERSION}"

from openai import AzureOpenAI

# DALL-E AI
client = AzureOpenAI(
    api_key = "G2PRojIueFtGUZc0SHf2E0xjooxgn3V9FZt1kl8r2UKpNFdeZAGNJQQJ99BDACYeBjFXJ3w3AAABACOGIMEc",
    api_version = "2024-02-01",
    azure_endpoint = "https://azure18-openai.openai.azure.com/"
)

# DALL-E를 사용하여 이미지 생성하는 함수
def generate_image_with_dalle(prompt, size="1024x1024"):
    try:
        response = client.images.generate(
            model="dev-dall-e-3",
            prompt=prompt,
            n=1,
            size=size
        )

        image_url = response.data[0].url

        # 이미지 URL에서 이미지 데이터 다운로드
        image_data = requests.get(image_url).content

        return image_url, image_data

    except Exception as e:
        print(f"이미지 생성 중 오류 발생: {e}")
        return None, None

# 이미지를 Base64로 인코딩하는 함수
def encode_image_to_base64(image_data):
    return base64.b64encode(image_data).decode('utf-8')

# DALL-E를 사용하여 이미지 기반 네 컷 만화를 생성하는 함수
def create_4_cut_comic_with_dalle(base64_image, prompt="이 이미지를 기반으로 네 컷 만화를 만들어주세요"):
    if not base64_image:
        return "만화를 생성할 기준 이미지가 없습니다."

    try:
        # 1단계: GPT-4o-mini로 이미지 분석하여 만화 스토리 구상
        story_response = client.chat.completions.create(
            model="dev-gpt-4o-mini",
            messages=[
                {"role": "system", "content": "당신은 이미지를 보고 귀엽고, 재미있는 네 컷 만화 스토리를 구상하는 AI입니다. 만들어진 이미지를 통해 네 컷으로 구성된 만화를 작성해주세요."},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "이 이미지를 보고 귀엽고, 재미있는 네 컷 만화 스토리를 구상해주세요. 각 패널의 색은 컬러로 작성해주세요."},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=500
        )

        story_idea = story_response.choices[0].message.content

        # 2단계: 네 컷 만화 각각의 프롬프트 생성
        panel_prompts_response = client.chat.completions.create(
            model="dev-gpt-4o-mini",
            messages=[
                {"role": "system", "content": "당신은 만화 스토리를 DALL-E 프롬프트로 변환하는 전문가입니다. 각 컷마다 상세한 시각적 설명을 포함한 프롬프트를 작성해주세요."},
                {"role": "user", "content": f"다음 네 컷 만화 스토리를 DALL-E에 입력할 4개의 개별 프롬프트로 변환해주세요. 각 프롬프트는 '1컷: ', '2컷: ' 등으로 시작해야 합니다.\n\n{story_idea}"}
            ],
            max_tokens=500
        )

        panel_prompts_text = panel_prompts_response.choices[0].message.content

        # 프롬프트 파싱
        import re
        panel_prompts = re.findall(r'(\d+)컷: (.*?)(?=\n\d+컷:|$)', panel_prompts_text, re.DOTALL)
        if len(panel_prompts) < 4:
            # 4개 미만인 경우 부족한 만큼 더미 프롬프트 추가
            for i in range(len(panel_prompts) + 1, 5):
                panel_prompts.append((str(i), f"네 컷 만화의 {i}번째 장면, 이전 장면의 연속"))

        # 3단계: DALL-E로 각 컷 생성
        comic_panels = []
        for i, (panel_num, prompt) in enumerate(panel_prompts[:4]):  # 최대 4개만 사용
            full_prompt = f"만화 스타일로, {prompt}. 단일 패널 만화, 간결한 그림체, 말풍선 포함, 컬러."

            try:
                panel_response = client.images.generate(
                    model="dev-dall-e-3",
                    prompt=full_prompt,
                    n=1,
                    size="1024x1024" # size가 ['1024x1024', '1792x1024', '1024x1792']로 지정되어 있음.
                )

                panel_url = panel_response.data[0].url
                comic_panels.append({
                    "panel_number": panel_num,
                    "prompt": prompt,
                    "image_url": panel_url
                })

                print(f"{panel_num}번 컷 생성 완료!")
            except Exception as e:
                print(f"{panel_num}번 컷 생성 중 오류 발생: {e}")
                comic_panels.append({
                    "panel_number": panel_num,
                    "prompt": prompt,
                    "error": str(e)
                })

        # 4단계: 결과 반환
        result = {
            "story_idea": story_idea,
            "comic_panels": comic_panels
        }

        return result
    except Exception as e:
        print(f"네 컷 만화 생성 중 오류 발생: {e}")
        return f"네 컷 만화 생성 중 오류가 발생했습니다: {str(e)}"

# 이미지 표시 함수 (결과 시각화용)
def display_comic_panels(comic_result):
    if isinstance(comic_result, str):
        print(comic_result)
        return

    print("=== 네 컷 만화 스토리 아이디어 ===")
    print(comic_result["story_idea"])
    print("\n=== 생성된 네 컷 만화 ===")

    import matplotlib.pyplot as plt
    from PIL import Image
    import requests
    from io import BytesIO

    # 2x2 그리드로 표시
    fig, axes = plt.subplots(2, 2, figsize=(15, 15))
    axes = axes.flatten()

    for i, panel in enumerate(comic_result["comic_panels"]):
        if "image_url" in panel:
            try:
                response = requests.get(panel["image_url"])
                img = Image.open(BytesIO(response.content))
                axes[i].imshow(img)
                axes[i].set_title(f"{panel['panel_number']}번 컷: {panel['prompt'][:50]}...")
                axes[i].axis('off')
            except Exception as e:
                axes[i].text(0.5, 0.5, f"이미지 로드 실패: {str(e)}",
                            horizontalalignment='center', verticalalignment='center')
        else:
            axes[i].text(0.5, 0.5, f"생성 실패: {panel.get('error', '알 수 없는 오류')}",
                        horizontalalignment='center', verticalalignment='center')

    plt.tight_layout()
    plt.show()

# 프롬포트 및 이미지 생성 위한 함수
def generate_and_analyze_image(user_prompt):
    print(f"DALL-E에 전달할 프롬프트: {user_prompt}")

    # 1단계: DALL-E로 입력 프롬프트 기반 이미지 생성
    image_url, image_data = generate_image_with_dalle(user_prompt)

    if not image_data:
        return {"result": "이미지 생성에 실패했습니다."}

    # 생성된 이미지를 표시
    image = Image.open(BytesIO(image_data))
    plt.figure(figsize=(10, 10))
    plt.imshow(image)
    plt.axis('off')
    plt.title(f"DALL-E 3로 생성된 이미지: {user_prompt}")
    plt.show()

    # 이미지를 Base64로 인코딩
    base64_image = encode_image_to_base64(image_data)

    # 2단계: 네 컷 만화 생성
    generation_prompt = "이 이미지를 기반으로 네 컷 만화를 만들어주세요. 이미지는 최대한 귀엽고 재미있게 만들어주세요!"
    comic_result = create_4_cut_comic_with_dalle(base64_image, generation_prompt)

    # 결과 반환 및 시각화
    display_comic_panels(comic_result)  # 네 컷 만화 결과를 시각적으로 표시

    return {
        "image_url": image_url,
        "analysis": comic_result
    }

# Azure OpenAI 모델 설정
from langchain.chat_models import AzureChatOpenAI
llm = AzureChatOpenAI(
    model_name="dev-gpt-4o-mini",
    temperature=0.3,
    max_tokens=1000)

# 프롬프트 템플릿 정의
template = """
사용자가 요청한 이미지를 생성하고 분석합니다.

사용자 요청: {user_input}

이 요청을 바탕으로 DALL-E 3에 전달할 적절한 이미지 생성 프롬프트를 작성해주세요.
프롬프트는 상세하고 창의적이어야 하며, 시각적으로 흥미로운 이미지가 생성될 수 있도록 해주세요.
"""

prompt = PromptTemplate.from_template(template)

# LangChain 체인 구성
chain = (
    {"user_input": RunnablePassthrough()} # 입력값을 "user_input"이라는 키로 매핑하여 다음 단계로 전달
    | prompt
    | llm
    | StrOutputParser() #  언어 모델의 응답을 문자열로 변환
    | generate_and_analyze_image # 프롬포트 및 이미지 생성 위한 함수
)

# 전체 파이프라인 실행 함수
def run_4cut_image_generation_pipeline():
    print("=== DALL-E 3과 GPT 4o-mini를 이용한 네 컷 만화 생성 파이프라인 ===\n")

    # 사용자 입력 받기
    user_request = input("어떤 네 컷 만화를 만들고 싶으신가요? 요청을 입력해주세요: ")

    # LangChain 체인 실행
    try:
        result = chain.invoke(user_request)

        print("\n=== 생성 완료 ===\n")
        print(result['analysis'])

        # 추가 분석 옵션
        while True:
            additional_question = input("\n추가로 작성하고 싶은 네 컷 만화가 있으신가요??? (없으면 '종료' 입력): ")

            if additional_question.lower() in ['종료', '없음', 'exit', 'no']:
                break

            # 추가 질문에 대한 응답
            additional_generation = create_four_panel_comic_with_dalle(
                encode_image_to_base64(requests.get(result['image_url']).content),
                f"이미지에 대한 추가 질문: {additional_question}"
            )

            print(f"\n--- 추가 질문에 대한 응답 ---\n")
            print(additional_generation)

    except Exception as e:
        print(f"파이프라인 실행 중 오류 발생: {e}")

# 파이프라인 실행
if __name__ == "__main__":
    run_4cut_image_generation_pipeline()

ㅈ

